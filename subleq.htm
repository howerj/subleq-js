<!DOCTYPE html>
<html lang="en">
<head>
	<title>SUBLEQ eForth</title>
	<meta charset="UTF-8">
	<style type="text/css">
		body{margin:40px auto;max-width:50%;line-height:1.6;font-size:18px;color:#444;padding:0 10px;}
		pre { white-space: pre-wrap; }
		.tab { overflow: hidden; border: 1px solid #ccc; background-color: #f1f1f1; }
		.tab button { background-color: inherit; float: left; border: none; outline: none; cursor: pointer; padding: 14px 16px; transition: 0.3s; }
		.tab button:hover { background-color: #ddd; }
		.tab button.active { background-color: #ccc; }
		.tabcontent { display: none; padding: 6px 12px; border: 1px solid #ccc; border-top: none; }
		.blink { animation: blinker 0.6s linear infinite; color: #333333; font-size: 24px; font-weight: bold; }
		@keyframes blinker { 50% { opacity: 0; } }
		label.buttonHack input[type="file"] { position:absolute; top: -1000px; }
		.buttonHack { border: 2px solid #AAA; border-radius: 4px; padding: 2px 5px; margin: 2px; background: #DDD; display: inline-block; }
		.buttonHack :hover { background: #CCC; }
		.buttonHack :active { background: #CCF; }
	</style>
</head>
<body>
	<!-- TODO: Better image loading/Default Image (Hello World image),
	 Cookie handling in Chrome -->
	<div class="tab">
		<button class="tablinks" onclick="openTab(event, 'subleq')">subleq</button>
		<button class="tablinks" onclick="openTab(event, 'image')">image</button>
		<!--<button class="tablinks" onclick="openTab(event, 'debugger')">debugger</button>-->
		<button class="tablinks" onclick="openTab(event, 'settings')">settings</button>
		<button class="tablinks" onclick="openTab(event, 'help')">help</button>
		<button class="tablinks" onclick="openTab(event, 'about')">about</button>
	</div>
	<div id="subleq" class="tabcontent"> </div>
	<div id="help"   class="tabcontent">
		<p>This system contains a <a href=" https://en.wikipedia.org/wiki/One-instruction_set_computer">SUBLEQ</a>
		virtual machine, a 16-bit version, that will automatically boot an eForth image, which is a variant of
		<a href="https://en.wikipedia.org/wiki/Forth_(programming_language)">Forth</a>, a stack
		based programming language suitable for constrained system.  What makes this system special
		is that SUBLEQ is a Turing complete <i>single instruction</i> machine, the instruction
		is short for "Subtract and Branch If Less Than Or Equal To Zero", it does a little more
		than that, but it means we do not have access to multiplication, division, addition,
		or even the basic bitwise operators such as AND or XOR in the base instruction set,
		nor calls, returns, or indirect load/stores. They all have to be synthesized.</p>
		<p>Each SUBLEQ instruction consists of three arguments; 'a', 'b', 'c'. 'a' and 'b'
		are addresses from which arguments are loaded from, the contents of the address
		of 'a' are subtracted from the contents at 'b' and stored back into 'b', if the
		result is less than or equal to zero, then 'c' is directly jumped to, otherwise
		the program counter is incremented by three, moving to the next instruction.</p>
		<p>There are two minor special cases, one for input, and one for output, if 'a'
		is the address -1, then byte is loaded from input and stored into the location
		pointed to by 'b', if 'b' is -1 then a byte is loaded from the location pointed
		to by 'a' and stored to output. Input is taken from the keyboard and output is
		the terminal screen in the case of this emulator.</p>
		<p>The following program, written in C, is capable of executing the same images
		that are used within this program:</p>
		<pre>
	#include &lt;stdio.h&gt;
	int main(int x,char**v){FILE*f=fopen(v[1],"r");short p=0,m[1&lt;&lt;16],*i=m;
	while(fscanf(f,"%hd",i++)&gt;0);for(;p&gt;=0;){int a=m[p++],b=m[p++],c=m[p++];
	a&lt;0?m[b]=getchar():b&lt;0?putchar(m[a]):(m[b]-=m[a])&lt;=0?p=c:0;}}
		</pre>
		<p> A Forth tutorial is beyond this help section. However, here are a few commands
		you can type into the system to get started: </p>
		<pre> words </pre>
		<p>This will print out a list of all of the built in functions defined in Forth.</p>
		<pre> 2 2 + . cr </pre>
		<p>Add two numbers together, both 2, and print the result, 4 along with a newline.</p>
		<pre> : ahoy cr ." Hello, World!" ; </pre>
		<p>Define a new word (functions are called "words" in Forth) named "ahoy", which when
		called like so:</p>
		<pre> ahoy </pre>
		<p>Will print the standard greeting. If the Forth interpreter is happy, "ok" will be
		printed out after entering each line. Be careful, white-space matters a lot in Forth.</p>
		<p> You can hit ESC to clear the screen and restart the system. </p>
		<p> Happy hacking! </p>
	</div>
	<div id="about" class="tabcontent">
		<table style="width:100%">
			<tr><th>Author</th><td>Richard James Howe</td></tr>
			<tr><th>Project</th><td>eForth running on SUBLEQ</td></tr>
			<tr><th>Email</th><td><a href="mailto:howe.r.j.89@gmail.com?subject=eForth SUBLEQ">howe.r.j.89@gmail.com</a></td></tr>
			<tr><th>Repo</th><td><a href="https://github.com/howerj/subleq">https://github.com/howerj/subleq</a></td></tr>
			<tr><th>License</th><td><a href="https://raw.githubusercontent.com/howerj/subleq/master/LICENSE">The Unlicense</a> / Public Domain</td></tr>
		</table>
	</div>
	<div id="settings" class="tabcontent">
		<input type="checkbox" id="highlight" name="highlight" onchange="saveCookies()" checked>
		<label for="highlight">highlight </label><br>
		<input type="checkbox" id="scroll" name="scroll" onchange="saveCookies()"  checked>
		<label for="scroll">scroll </label><br>
		<input type="checkbox" id="optimizeImage" name="optimizeImage" onchange="saveCookies()" checked>
		<label for="optimizeImage">remove trailing zeros on save </label><br>
		<label for="base">base </label>
		<input type="number" id="base" name="base" min="2" max="36" onchange="saveCookies()" value=16>
	</div>
	<div id="image" class="tabcontent">
		<div>
			<label class="buttonHack"> <button hidden onclick="saveImage()">save</button> <span>save</span></label>
			<label for="fname">file</label>
			<input type="text" id="fname" name="fname" value="subleq.dec">
			<label for="cells">cells</label>
			<input type="text" id="cells" name="cells" value="8192">
		</div>
		<label class="buttonHack">
			<input type="file" id="input" oninput="loadImage()">
			<span>load</span>
		</label>
		<hr>
		<pre id="dump"></pre>
	</div>
	<canvas id="keydown"></canvas>
	<script type="text/javascript">
		const init = ".( EFORTH LOADED - USED:) here u. cr\n";
		var file = "https://raw.githubusercontent.com/howerj/subleq/master/subleq.dec";
		var screen = "", input = init, cursor = '<b class="blink">_</b>';
		var loaded = false, focused = false, running = true, reloadOnExit = true;
		var redrawTimeout;
		var pc = 0, cycles = 0, total = 0;
		var hello = "9\n-1\n3\n10\n-1\n6\n0\n0\n-1\n72\n105\n0\n";
		var m = new Uint16Array(65536);

		function updateDump() {
			function dump(a, as, base) {
				function maxPad(max, base) {
					return Math.ceil(Math.log(max) / Math.log(base));
				}
				function pad(number, length) {
					var str = '' + number;
					while (str.length < length) str = '0' + str;
					return str;
				}
				var r = "", p = maxPad(65536, base), cols = 20 - p;
				for (let i = 0; i < as; i += cols) {
					var l = pad(i.toString(base), p) + ": ";
					for (let j = 0; j < cols && (i + j) < as; j++) {
						l += pad(m[i+j].toString(base), p) + " ";
					}
					r += l + "\n";
				}
				return r;
			}
			let base = document.getElementById("base").value;
			base = base > 36 || base < 2 ? 16 : base;
			document.getElementById("dump").innerHTML = dump(m, 65536, base);
		}

		function openTab(evt, name) {
			let tabcontent = document.getElementsByClassName("tabcontent");
			for (let i = 0; i < tabcontent.length; i++) { tabcontent[i].style.display = "none"; }
			let tablinks = document.getElementsByClassName("tablinks");
			for (let i = 0; i < tablinks.length; i++) { tablinks[i].className = tablinks[i].className.replace(" active", ""); }
			document.getElementById(name).style.display = "block";
			evt.currentTarget.className += " active";
			focused = false;
			switch (name) {
			case "subleq": queueDraw(); focused = true; break;
			case "image": updateDump(); break;
			}
		}

		function saveImage() {
			function isNumeric(str) {
				if (typeof str != "string") return false;
				return !isNaN(str) && !isNaN(parseFloat(str));
			}
			function save(filename, data) {
				var blob = new Blob([data], {type: 'text/plain'});
				if (window.navigator.msSaveOrOpenBlob) {
					window.navigator.msSaveBlob(blob, filename);
					return;
				}
				var elem = window.document.createElement('a');
				elem.href = window.URL.createObjectURL(blob);
				elem.download = filename;
				document.body.appendChild(elem);
				elem.click();
				document.body.removeChild(elem);
			}
			let filename = document.getElementById("fname").value;
			let cells = document.getElementById("cells").value;
			filename = filename == undefined || filename === "" ? "subleq.dec" : filename;
			cells = isNumeric(cells) ? parseInt(cells) : 8192;
			if (cells < 0)
				cells = 0;
			if (cells > 65536)
				cells = 65536;
			let x = "";
			for (let i = 0; i < cells; i++)
				x += m[i].toString() + "\n";
			if (document.getElementById('optimizeImage').checked)
				x = x.replace(/(0\n)+$/g, '');
			save(filename, x);
		}

		function loadImageFromString(str) {
			var txt = str.split(/\r?\n/g);
			for (var i = 0; i < 65536; i++)
				m[i] = undefined == txt[i] ? 0 : parseInt(txt[i]);
			loaded = true;
		}

		function loadImage() {
			document.getElementById('input').files[0].text().then(t => loadImageFromString(t));
			pc = 0;
			screen = "";
			input = init;
			updateDump();
		}

		function saveCookies() {
			function setCookie(cname, cvalue, exdays) {
				let d = new Date();
				d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
				let expires = "expires="+ d.toUTCString();
				document.cookie = cname + "=" + cvalue + "; SameSite=Strict; " + expires + ";path=/";
			}
			let expire = 365;
			setCookie("highlight",     document.getElementById('highlight').checked,     expire);
			setCookie("scroll",        document.getElementById('scroll').checked,        expire);
			setCookie("optimizeImage", document.getElementById('optimizeImage').checked, expire);
			setCookie("base",          document.getElementById("base").value,            expire);
		}

		function setValuesFromCookies() {
			function getCookie(cname, defaultVal) {
				let name = cname + "=";
				let decodedCookie = decodeURIComponent(document.cookie);
				let ca = decodedCookie.split(';');
				for(let i = 0; i < ca.length; i++) {
					let c = ca[i];
					while (c.charAt(0) == ' ')
						c = c.substring(1);
					if (c.indexOf(name) == 0)
						return c.substring(name.length, c.length);
				}
				return defaultVal;
			}
			document.getElementById('highlight').checked     = getCookie("highlight", "true") == "true" ? true : false;
			document.getElementById('scroll').checked        = getCookie("scroll", "true") == "true" ? true : false;
			document.getElementById('optimizeImage').checked = getCookie("optimizeImage", "true") == "true" ? true : false;
			document.getElementById("base").value            = getCookie("base", 16);
		}

		function esc(i) {
			i = i.replace(/&/g, '&amp;');
			i = i.replace(/</g, '&lt;');
			return i.replace(/>/g, '&gt;');
		}

		function highlight(i) { /* good enough, could also <u> things */
			if (!document.getElementById('highlight').checked)
				return i;
			i = i.replace(/\b[0-9]+[^a-zA-Z=<>*\(\)\/@+&-]/g, function(x) { return "<b>" + x + "</b>" });
			return i.replace(/\b(if|else|for|next|aft|then|while|begin|repeat|until|again)\b/g, function(x) { return "<i>" + x + "</i>" });
		}

		function doDraw() {
			document.getElementById('subleq').innerHTML = "<pre>" + highlight(esc(screen)) + cursor + "</pre>";
			if (document.getElementById('scroll').checked)
				window.scrollTo(0, document.body.scrollHeight);
		}

		function queueDraw() { /* might be better with two timers, so redraw is done at least every X ms */
			if (redrawTimeout) { /* expensive operation, do not redraw every key-press */
				clearTimeout(redrawTimeout);
				redrawTimeout = null;
			}
			redrawTimeout = setTimeout(doDraw, 50);
		}

		function backspace() {
			let last = screen.slice(-1);
			if (last != '\n' && last != '\r')
				screen = screen.substring(0, screen.length - 1);
		}

		function keyToKey(k) { /* NB. Fun to funky */
			switch (k) {
			case "Enter": return '\n';
			case "Escape": return '\u001B';
			case "Delete": case "Backspace": return '\u0008';
			default: if (k.length != 1) k = ''; return k;
			}
		}

		document.documentElement.addEventListener('keydown', function (e) {
			if (!focused) return false;
			var k = keyToKey(e.key);
			if (k.length === 0) { return false; }
			else if (k === '\u0008') { backspace(); }
			else if (k === '\u001B') { running = false; return false; }
			else { screen += k; }
			input += k;
			queueDraw();
			return false;
		}, false);

		function getch() {
			if (input.length === 0)
				return -1;
			let r = input.charCodeAt(0);
			input = input.substring(1);
			return r;
		}

		function putch(ch) {
			let o = String.fromCharCode(ch);
			if (o === '\u0008') { backspace(); }
			else { screen += o; }
			queueDraw();
		}

		function subleq() { /* The ISA of the future! */
			if (!loaded) { setTimeout(subleq, 20); return; }
			while ((pc & 0x8000) === 0 && running) {
				if (cycles++ > 10000000 || !focused) { cycles = 0; setTimeout(subleq, 10); return; }
				let a = m[pc+0];
				let b = m[pc+1];
				let c = m[pc+2];
				if (a === 0xFFFF) {
					let ch = getch();
					if (ch < 0) {
						setTimeout(subleq, 20);
						return;
					}
					m[b] = ch;
					pc += 3;
				} else if (b === 0xFFFF) {
					putch(m[a]);
					pc += 3;
				} else {
					let d = m[b] - m[a];
					m[b] = d;
					pc = (d & 0x8000) || (d === 0) ? c : pc + 3;
				}
				pc &= 0xFFFF;
				total++;
			}
			if (reloadOnExit)
				window.location.reload();
		}

		document.getElementsByClassName('tablinks')[0].click();
		setValuesFromCookies();
		console.log("loading file: " + file);
		fetch(file).then(r => r.text()).then(t => { loadImageFromString(t); queueDraw(); });
		/*loadImageFromString(hello); queueDraw(); reloadOnExit = false;*/
		console.log("subleq running...");
		subleq();
	</script>
</body>
</html>
